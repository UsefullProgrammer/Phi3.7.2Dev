# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down) round = yes
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root

edict_size_effect = {
	base = 0.02
	#mult = trigger:num_pops
	mult = trigger:empire_size
	add = 1
}
minor_artifact_size_effect = {
	base = 0.02
	#mult = trigger:num_pops
	mult = trigger:empire_size
	add = 1
	mult = 0.01
}
edict_pop_size_effect = {
	base = 0.02
	mult = trigger:num_pops
	add = 1
}
mult_years_passed = {
	base = 0.025 #test , set 0.025
	mult = trigger:years_passed
	add = 1
}
edict_mult_num_empires = {
	base = 0.9
	mult = num_empires
	add = 1
}
edict_trade_minimum_galactic_trade = {
	base = 150
	mult = num_empires
	min = 500
	max = 2500
}



edict_fleet_size_effect = {
	base = 0.015
	#mult = trigger:num_pops
	#mult = owner.trigger:num_ships
	#mult = trigger:fleet_size #non funziona
	mult = trigger:used_naval_capacity_integer
	add = 1
}
pop_size_ventesimal_floor = {
	base = 0
	add = trigger:num_pops
	divide = 20
	floor = yes
}
pop_size_ventesimal = {
	base = 0
	add = trigger:num_pops
	divide = 20
	round = yes
}
pop_size_decimal = {
	base = 0
	add = trigger:num_pops
	divide = 10
	round = yes
}
pop_size_fifty = {
	base = 0
	add = trigger:num_pops
	mult = 50
	round = yes
}
pop_size_twenty = {
	base = 0
	add = trigger:num_pops
	mult = 20
	round = yes
}
pop_size = {
	base = 0
	add = trigger:num_pops
	round = yes
}
power_fleet_factor = {
	base = 1
	add = trigger:fleet_power
	div = 70000
	mult = 10
	subtract = 5
	min = 0
	max = 6
	round = yes
}
job_weights_research_eng_modifier = {
	complex_trigger_modifier = {
		trigger = check_economic_production_modifier_for_job
		parameters = {
			job = $JOB$
			resource = {
				physics_research = 0.9
				engineering_research = 0.1
			}
		}
		mode = add
	}
	add = value:job_weights_manual_corrections|JOB|$JOB$|
	add = 1
	min = 0
	pow = 3 #we need it to have a bit more impact
}
job_weights_research_phy_modifier = {
	complex_trigger_modifier = {
		trigger = check_economic_production_modifier_for_job
		parameters = {
			job = $JOB$
			resource = {
				physics_research = 0.1
				engineering_research = 0.9
			}
		}
		mode = add
	}
	add = value:job_weights_manual_corrections|JOB|$JOB$|
	add = 1
	min = 0
	pow = 3 #we need it to have a bit more impact
}
Expanse_planer_admin_modifier = {
	base = owner.max_example_variable
	mult = 5
}
Expanse_planer_malus_research_modifier = {
	base = owner.max_example_variable
	div = 10
	mult = -1
}

# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}